#!/bin/bash

MYSQL_HOST="localhost"
MYSQL_PORT="3306"
MYSQL_USERNAME="mysqlchkusr"
MYSQL_PASSWORD="S3cr3tP4ss"
SLEEPSECONDS=1
GALERASTATE="/dev/shm/mysql-loadbalancer-monitor-galerastate"
RUNNINGSTATE="/dev/shm/mysql-loadbalancer-monitor-runningstate"
ERRORCOUNTS="/dev/shm/mysql-loadbalancer-monitor-errorcounts"
TMP_FILE="/dev/shm/mysql-loadbalancer-monitor.out"
ERR_FILE="/dev/shm/mysql-loadbalancer-monitor.err"


AVAILABLE_WHEN_DONOR=${1:-0}
AVAILABLE_WHEN_READONLY=${2:-1}
DEFAULTS_EXTRA_FILE=${3:-/etc/my.cnf}

MYSQL_CMDLINE="/usr/bin/mysql --host=$MYSQL_HOST --port=$MYSQL_PORT --user=$MYSQL_USERNAME --password=$MYSQL_PASSWORD"


#check to see if this script is already running and if it is then exit
SCRIPT=`basename $0`
PIDFILE='/tmp/mysql-loadbalancer-monitor.pid'
RUNNINGPID='NONE'
# this minimizes the amount of time that a running state or master state file can be in an undefined state due to currently being written without adding flocks (which could still be needed)
function writestate {
    filename=$1
    oldstate=$2
    newstate=$3
    if [ "$oldstate" != "$newstate" ]
    then
        #echo "writing state: $filename, $oldstate, $newstate"
        echo $newstate > $filename
    fi
}

if [ -f $PIDFILE ]
then
    RUNNINGPID=`cat $PIDFILE`
fi
#echo "$$"
if echo `ps aux | awk '{print $2}'` | grep -q $RUNNINGPID
then
    echo "Monitor currently running as pid: $RUNNINGPID"
    echo "Exiting"
    exit 1
fi
echo $$ > $PIDFILE
while true
do
    GSTATE="$(/bin/cat $GALERASTATE)"
    RSTATE="$(/bin/cat $RUNNINGSTATE)"
    ESTATE="$(/bin/cat $ERRORCOUNTS)"
    if [[ $GSTATE = "" ]]
    then
        GSTATE="NONE"
    fi
    if [[ $ESTATE = "" ]]
    then
        ESTATE="NONE"
    fi
    if [[ $RSTATE = "" ]]
    then
        RSTATE="NONE"
    fi
    WSREP_STATUS=$($MYSQL_CMDLINE -e"show status like 'wsrep_local_state';" | tail -1 | awk '{print $2}')


    if [[ "${WSREP_STATUS}" == "4" ]] || [[ "${WSREP_STATUS}" == "2" && ${AVAILABLE_WHEN_DONOR} == 1 ]]
    then
        if [[ $AVAILABLE_WHEN_READONLY -eq 0 ]];then
        READ_ONLY=$($MYSQL_CMDLINE -e "SHOW GLOBAL VARIABLES LIKE 'read_only';" \
                    2>${ERR_FILE} | tail -1 2>>${ERR_FILE})




        if [[ "${READ_ONLY}" == "ON" ]];then
            writestate $GALERASTATE $GSTATE "READONLY"
#           exit 1
        fi

        fi

        writestate $GALERASTATE $GSTATE "SYNCED"
#        exit 0

    else
        writestate $GALERASTATE $GSTATE "UNSYNCED"
#        exit 1

    fi







    ERRORS=0
    if [ -f $ERRORCOUNTS ]
    then
            ERRORS=`cat $ERRORCOUNTS`
    fi
       $($MYSQL_CMDLINE -e"show databases;" > $TMP_FILE 2> $ERR_FILE)

    if [ "$(/bin/cat $ERR_FILE | grep -v "Warning: Using a password on the command line interface can be insecure.")" != "" ]
    then
        writestate $RUNNINGSTATE $RSTATE "DOWN"
        writestate $ERRORCOUNTS $ESTATE "0"
        #echo DOWN > $RUNNINGSTATE
        #echo 0 > $ERRORCOUNTS

    elif [ "$(/bin/cat $TMP_FILE)" != "" ]
    then
        writestate $RUNNINGSTATE $RSTATE "UP"
        writestate $ERRORCOUNTS $ESTATE "0"
        #echo UP > $RUNNINGSTATE
        #echo 0 > $ERRORCOUNTS
    else
        ((ERRORS=$ERRORS+1))
        writestate $ERRORCOUNTS $ESTATE $ERRORS
        #echo $ERRORS > $ERRORCOUNTS
    fi

sleep $SLEEPSECONDS

done
